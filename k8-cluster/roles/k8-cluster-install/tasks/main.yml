---
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install prerequisites
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - apt-transport-https
    state: present

# ansible.builtin.apt_key module failed while running on Ubuntu Server 25.04.
# Had to replace it with manual GPG key setup without apt-key as below 3 tasks
- name: Create keyring directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes GPG key and dearmor
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | \
    gpg --dearmor --yes -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Set keyring permissions
  file:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    mode: '0644'

# plucky (25.04) is not supported yet. Using 'noble' instead of ansible_lsb.codename
- name: Add Kubernetes APT Repository
  apt_repository:
    repo: >
      deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] 
      https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
    state: present
    filename: kubernetes

- name: Update apt cache again
  apt:
    update_cache: yes

- name: Install kubernetes packages
  apt:
    name: "{{ kubernetes_packages }}"
    state: present

- name: Hold Kubernetes packages to prevent auto-upgrade
  command: "apt-mark hold {{ item }}"
  loop:
    - kubelet
    - kubeadm
    - kubectl
  become: true

- name: Set containerd config
  shell: |
    containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | \
    tee /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml
  become: true
  notify: Restart containerd

- name: Run kubeadm init only on control plane
  command: >
    kubeadm init
    --apiserver-advertise-address={{ ansible_host }}
    --pod-network-cidr={{ pod_network_cidr }}
    --upload-certs
  args:
    creates: /etc/kubernetes/admin.conf
  when: inventory_hostname == "pi-master"
  become: true

- name: Ensure .kube directory exists
  file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user | default(ansible_user) }}"
    mode: '0755'
  when: inventory_hostname == "pi-master"
  become: true

- name: Set up kubeconfig
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user | default(ansible_user) }}"
    mode: '0600'
  when: inventory_hostname == "pi-master"
  become: true

- name: Enable Kubelet service
  systemd:
    name: kubelet
    enabled: yes
    state: started
  register: kubelet_status

- name: Fail if kubelet is not running
  fail:
    msg: "kubelet is not running"
  when: not kubelet_status.status.ActiveState == "active"

- name: Deploy Flannel CNI using kubectl
  command: kubectl apply --validate=false -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  register: flannel_result
  when: inventory_hostname == "pi-master"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  changed_when: "'created' in flannel_result.stdout or 'configured' in flannel_result.stdout"
  become: true
